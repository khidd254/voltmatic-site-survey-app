name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    # Allow manual triggering of the workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake libffi-dev libssl-dev libltdl-dev

    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      with:
        api-level: 30
        build-tools: 30.0.3
        ndk-version: 23.2.8568313

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install buildozer==1.5.0 cython==0.29.33
        
    - name: Accept Android SDK licenses
      run: |
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true

    - name: Cache buildozer global directory
      uses: actions/cache@v4
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}

    - name: Cache buildozer directory
      uses: actions/cache@v4
      with:
        path: .buildozer
        key: buildozer-${{ hashFiles('buildozer.spec') }}

    - name: Build APK with verbose output
      run: |
        set -x  # Enable debug output
        
        # Clean previous builds
        rm -rf .buildozer bin
        
        # Initialize buildozer if not already done
        if [ ! -f buildozer.spec ]; then
          buildozer init
        fi
        
        # Create bin directory if it doesn't exist
        mkdir -p bin
        
        # Print environment for debugging
        echo "=== Environment Variables ==="
        env | sort
        echo "==========================="
        
        # Check Python and Buildozer versions
        echo "=== Versions ==="
        python --version
        pip list | grep -E "buildozer|kivy|python-for-android"
        echo "==============="
        
        # Build with verbose output
        echo "Starting build..."
        buildozer -v android debug 2>&1 | tee build.log
        
        # Check build result
        BUILD_RESULT=${PIPESTATUS[0]}
        
        # Create a summary of the build
        echo "=== Build Summary ===" > build-summary.txt
        echo "Build exit code: $BUILD_RESULT" >> build-summary.txt
        echo "\n=== Directory Structure ===" >> build-summary.txt
        find . -type d | sort >> build-summary.txt
        echo "\n=== Bin Directory Contents ===" >> build-summary.txt
        ls -la bin/ 2>/dev/null || echo "bin/ directory not found" >> build-summary.txt
        
        # Save build log as artifact
        echo "BUILD_LOG<<EOF" >> $GITHUB_ENV
        cat build.log >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        # Exit with build status
        if [ $BUILD_RESULT -ne 0 ]; then
          echo "Build failed with exit code $BUILD_RESULT"
          exit $BUILD_RESULT
        fi

    - name: Upload Build Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          **/bin/*.apk
          build.log
          build-summary.txt
          .buildozer/**/android/platform/build-*/build/outputs/apk/*/*.apk
        retention-days: 7
        if-no-files-found: warn
