name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Cancel in-progress runs when new commits are pushed
concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    env:
      ANDROID_HOME: /opt/android-sdk
      ANDROID_SDK_ROOT: /opt/android-sdk
      ANDROID_NDK_HOME: /opt/android-sdk/ndk/25.2.9519653

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
            build-essential \
            git \
            python3-pip \
            python3-dev \
            python3-venv \
            libssl-dev \
            zlib1g-dev \
            libffi-dev \
            libxml2-dev \
            libxslt1-dev \
            libjpeg-dev \
            libpng-dev \
            autoconf \
            libtool \
            pkg-config \
            zlib1g-dev \
            cmake \
            openjdk-11-jdk \
            unzip \
            wget \
            curl \
            ninja-build

    - name: Install Buildozer
      run: |
        pip install --user buildozer==1.5.0
        pip install --user cython==0.29.33

    - name: Enable build caching
      run: |
        # Create buildozer cache directory
        mkdir -p ~/.buildozer
        # Use ccache for faster C compilation
        sudo apt-get install -y ccache
        echo 'export PATH="/usr/lib/ccache:$PATH"' >> ~/.bashrc
        export PATH="/usr/lib/ccache:$PATH"
        ccache --max-size=2G
        pip install --user buildozer
        export PATH=$PATH:$HOME/.local/bin/
        buildozer --version

    - name: Set up Android SDK and NDK
      run: |
        sudo mkdir -p $ANDROID_HOME
        sudo chown $USER:$USER $ANDROID_HOME
        mkdir -p ~/.android
        touch ~/.android/repositories.cfg
        
        # Install Android Command Line Tools
        wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O cmdline-tools.zip
        mkdir -p $ANDROID_HOME/cmdline-tools/latest
        unzip -q cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools/
        mv $ANDROID_HOME/cmdline-tools/cmdline-tools/* $ANDROID_HOME/cmdline-tools/latest/
        rm -r $ANDROID_HOME/cmdline-tools/cmdline-tools
        
        # Accept licenses
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
        
        # Install required Android packages
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-30" \
            "build-tools;30.0.3" \
            "ndk;25.2.9519653"
        
        # Create legacy tools directory structure for buildozer compatibility
        mkdir -p $ANDROID_HOME/tools/bin
        ln -sf $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager $ANDROID_HOME/tools/bin/sdkmanager
        ln -sf $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager $ANDROID_HOME/tools/bin/avdmanager
        
        # Set environment variables for buildozer
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/25.2.9519653" >> $GITHUB_ENV
        
        # Add Android tools to PATH
        echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
        echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$ANDROID_HOME/tools/bin" >> $GITHUB_PATH

    - name: Configure buildozer to use pre-installed SDK/NDK
      run: |
        # Verify buildozer.spec exists and has correct configuration
        if [ ! -f buildozer.spec ]; then
          echo "buildozer.spec not found!"
          exit 1
        fi
        
        # Update buildozer.spec to use our pre-installed SDK/NDK
        sed -i "s|android.sdk_path.*|android.sdk_path = $ANDROID_HOME|g" buildozer.spec
        sed -i "s|android.ndk_path.*|android.ndk_path = $ANDROID_NDK_HOME|g" buildozer.spec
        
        # Create symlink so buildozer finds the NDK in its expected location
        mkdir -p ~/.buildozer/android/platform
        ln -sf $ANDROID_NDK_HOME ~/.buildozer/android/platform/android-ndk-r25.2.9519653
        
        # Display current configuration for debugging
        echo "=== Updated buildozer.spec configuration ==="
        grep -E "(requirements|android\.(api|minapi|ndk|sdk|archs|accept_sdk_license|ndk_path|sdk_path))" buildozer.spec || true
        
        # Verify environment variables
        echo "=== Environment Variables ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        
        # Check if Android SDK/NDK are properly installed
        echo "=== Verifying SDK/NDK installation ==="
        ls -la $ANDROID_HOME/ || echo "Android SDK directory not found"
        ls -la $ANDROID_HOME/ndk/ || echo "NDK directory not found"
        ls -la $ANDROID_HOME/ndk/25.2.9519653/ || echo "Specific NDK version not found"
        
        # Verify sdkmanager is accessible
        echo "=== Verifying sdkmanager accessibility ==="
        ls -la $ANDROID_HOME/tools/bin/sdkmanager || echo "sdkmanager symlink not found"
        $ANDROID_HOME/tools/bin/sdkmanager --version || echo "sdkmanager not working"
        
        # Verify NDK symlink for buildozer
        echo "=== Verifying NDK symlink for buildozer ==="
        ls -la ~/.buildozer/android/platform/android-ndk-r25.2.9519653 || echo "NDK symlink not found"

    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Pre-build checks
      run: |
        echo "=== Pre-build Validation ==="
        
        # Check if main.py exists
        if [ ! -f main.py ]; then
          echo "ERROR: main.py not found!"
          exit 1
        fi
        
        # Check if all required screen files exist
        echo "Checking screen files..."
        for screen in home_screen clients_screen survey_screen client_form_screen surveys_list_screen call_history_screen; do
          if [ ! -f "app/screens/${screen}.py" ]; then
            echo "WARNING: app/screens/${screen}.py not found"
          fi
          if [ ! -f "app/screens/${screen}.kv" ]; then
            echo "WARNING: app/screens/${screen}.kv not found"
          fi
        done
        
        # Check if database.py exists
        if [ ! -f app/database.py ]; then
          echo "ERROR: app/database.py not found!"
          exit 1
        fi
        
        # Check if assets directory exists
        if [ ! -d assets ]; then
          echo "WARNING: assets directory not found, creating..."
          mkdir -p assets/images assets/icons
        fi
        
        # Validate buildozer.spec syntax
        echo "Validating buildozer.spec..."
        python -c "import configparser; config = configparser.ConfigParser(); config.read('buildozer.spec'); print('buildozer.spec syntax is valid')"

    - name: Build APK
      run: |
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$HOME/.local/bin
        export ANDROID_HOME=$ANDROID_HOME
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export ANDROID_NDK_HOME=$ANDROID_HOME/ndk/25.2.9519653
        
        # Debug environment
        echo "=== Environment Debug ==="
        echo "PATH: $PATH"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "Python version: $(python --version)"
        echo "Buildozer version: $(buildozer --version)"
        
        # Check buildozer.spec
        echo "=== Buildozer Config Check ==="
        if [ -f buildozer.spec ]; then
          echo "buildozer.spec found"
          grep -E "requirements|android\.(api|minapi|ndk|sdk)" buildozer.spec
        else
          echo "ERROR: buildozer.spec not found!"
          exit 1
        fi
        
        # Create necessary directories
        mkdir -p bin
        
        # Build with buildozer (capture exit code)
        echo "Starting buildozer build..."
        echo "=== Buildozer command about to run ==="
        which buildozer
        buildozer --version
        
        set +e  # Don't exit on error
        
        # Try buildozer clean first to ensure fresh build
        echo "=== Cleaning buildozer cache ==="
        buildozer android clean || true
        
        # Run buildozer with maximum verbosity and error capture
        echo "=== Running buildozer android debug with maximum verbosity ==="
        # Use parallel compilation for faster builds
        export MAKEFLAGS="-j$(nproc)"
        export CCACHE_DIR=~/.ccache
        
        # Ensure bin directory exists
        mkdir -p bin
        
        # Run buildozer debug build
        buildozer android debug --verbose 2>&1 | tee build.log
        BUILD_EXIT_CODE=$?
        
        # Check if APK was created in default buildozer location
        echo "=== Checking for APK in buildozer bin directory ==="
        if [ -f "bin/voltmaticapp-0.1-arm64-v8a-debug.apk" ]; then
          echo "Found APK: bin/voltmaticapp-0.1-arm64-v8a-debug.apk"
          ls -la bin/voltmaticapp-0.1-arm64-v8a-debug.apk
        elif [ -f "bin/voltmaticapp-0.1-armeabi-v7a-debug.apk" ]; then
          echo "Found APK: bin/voltmaticapp-0.1-armeabi-v7a-debug.apk"
          ls -la bin/voltmaticapp-0.1-armeabi-v7a-debug.apk
        else
          echo "APK not found in bin directory, searching buildozer cache..."
          find .buildozer -name "*.apk" -type f 2>/dev/null | head -5
        fi
        
        # Immediately check for specific errors if build failed
        if [ $BUILD_EXIT_CODE -ne 0 ]; then
          echo "=== BUILD FAILED - Analyzing error ==="
          echo "Exit code: $BUILD_EXIT_CODE"
          
          # Look for specific error patterns
          echo "=== Searching for specific errors ==="
          grep -A5 -B5 -i "error\|exception\|failed\|traceback" build.log | tail -50
          
          echo "=== Trying release build as fallback ==="
          buildozer android release 2>&1 | tee -a build.log
          BUILD_EXIT_CODE=$?
        fi
        
        set -e  # Re-enable exit on error
        
        echo "=== Buildozer completed with exit code: $BUILD_EXIT_CODE ==="
        
        echo "Build completed with exit code: $BUILD_EXIT_CODE"
        
        # Show different parts of the build log for debugging
        echo "=== Build Log Analysis ==="
        echo "Total log lines: $(wc -l < build.log)"
        
        echo "=== First 50 lines (setup phase) ==="
        head -50 build.log
        
        echo "=== Lines containing ERROR, FAILED, or Exception ==="
        grep -n -i "error\|failed\|exception\|traceback" build.log || echo "No obvious errors found"
        
        echo "=== Last 200 lines (final phase) ==="
        tail -200 build.log
        
        # Comprehensive APK search and debugging
        echo "=== Comprehensive APK Search ==="
        echo "Searching entire filesystem for APK files..."
        
        # First check the most likely locations
        echo "=== Checking standard APK locations ==="
        for location in "bin/" ".buildozer/android/platform/build-arm64-v8a/dists/voltmaticapp/build/outputs/apk/debug/" ".buildozer/android/platform/build-armeabi-v7a/dists/voltmaticapp/build/outputs/apk/debug/" ".buildozer/android/platform/build/dists/voltmaticapp/build/outputs/apk/debug/"; do
          if [ -d "$location" ]; then
            echo "Checking $location:"
            find "$location" -name "*.apk" -type f 2>/dev/null | head -3
          fi
        done
        
        # Then do comprehensive search
        echo "=== Full APK search ==="
        find . -name "*.apk" -type f 2>/dev/null | while read apk; do
          echo "Found APK: $apk"
          ls -la "$apk"
          file "$apk"
        done
        
        echo "=== Buildozer Directory Structure ==="
        if [ -d .buildozer ]; then
          find .buildozer -type f -name "*.apk" 2>/dev/null || echo "No APK files in .buildozer"
          echo "=== Buildozer android platform contents ==="
          ls -la .buildozer/android/platform/ 2>/dev/null || echo "No platform directory"
          if [ -d .buildozer/android/platform ]; then
            find .buildozer/android/platform -name "*apk*" -o -name "*dist*" -o -name "*build*" 2>/dev/null | head -10
          fi
        else
          echo ".buildozer directory does not exist"
        fi
        
        echo "=== Checking build log for APK generation ==="
        grep -i "apk\|package\|signing\|zipalign" build.log | tail -10 || echo "No APK-related messages in build log"
        
        # Try to find and copy any APK files
        APK_FOUND=false
        APK_FILES=$(find . -name "*.apk" -type f 2>/dev/null)
        
        if [ -n "$APK_FILES" ]; then
          echo "=== Copying found APK files to bin directory ==="
          mkdir -p bin
          for apk in $APK_FILES; do
            echo "Copying $apk to bin/"
            cp "$apk" "bin/$(basename "$apk")"
            # Also create a generic name
            cp "$apk" "bin/voltmatic-app.apk"
            APK_FOUND=true
          done
        else
          # Try alternative buildozer command if no APK found
          echo "=== No APK found, trying alternative build command ==="
          buildozer android debug --verbose --force-build 2>&1 | tee -a build.log
          
          # Search again after alternative build
          APK_FILES=$(find . -name "*.apk" -type f 2>/dev/null)
          if [ -n "$APK_FILES" ]; then
            echo "=== APK found after alternative build ==="
            mkdir -p bin
            for apk in $APK_FILES; do
              echo "Copying $apk to bin/"
              cp "$apk" "bin/$(basename "$apk")"
              cp "$apk" "bin/voltmatic-app.apk"
              APK_FOUND=true
            done
          fi
        fi
        
        # Final check and force APK creation if needed
        if [ "$APK_FOUND" = true ]; then
          echo "=== APK files successfully located ==="
          ls -la bin/
        else
          echo "=== NO APK FILES FOUND - Trying manual APK creation ==="
          
          # Check if we have gradle build outputs
          if [ -d .buildozer/android/platform ]; then
            echo "=== Searching for gradle build outputs ==="
            find .buildozer/android/platform -name "*.apk" -o -name "app-debug.apk" -o -name "app-release.apk" 2>/dev/null || echo "No gradle APKs found"
            
            # Try to find any built APK in gradle outputs
            GRADLE_APK=$(find .buildozer/android/platform -name "*.apk" 2>/dev/null | head -1)
            if [ -n "$GRADLE_APK" ]; then
              echo "Found gradle APK: $GRADLE_APK"
              cp "$GRADLE_APK" bin/voltmatic-app.apk
              APK_FOUND=true
            fi
          fi
          
          # If still no APK, create a dummy file to indicate the issue
          if [ "$APK_FOUND" = false ]; then
            echo "Creating comprehensive error report file..."
            echo "APK generation failed. Build exit code: $BUILD_EXIT_CODE" > bin/BUILD_FAILED.txt
            echo "Check build.log for details" >> bin/BUILD_FAILED.txt
            echo "" >> bin/BUILD_FAILED.txt
            echo "=== ERROR ANALYSIS ===" >> bin/BUILD_FAILED.txt
            echo "Total log lines: $(wc -l < build.log)" >> bin/BUILD_FAILED.txt
            echo "" >> bin/BUILD_FAILED.txt
            echo "=== ERRORS, FAILURES, EXCEPTIONS ===" >> bin/BUILD_FAILED.txt
            grep -n -i "error\|failed\|exception\|traceback" build.log >> bin/BUILD_FAILED.txt || echo "No obvious errors found" >> bin/BUILD_FAILED.txt
            echo "" >> bin/BUILD_FAILED.txt
            echo "=== FIRST 50 LINES (Setup Phase) ===" >> bin/BUILD_FAILED.txt
            head -50 build.log >> bin/BUILD_FAILED.txt
            echo "" >> bin/BUILD_FAILED.txt
            echo "=== LAST 200 LINES (Final Phase) ===" >> bin/BUILD_FAILED.txt
            tail -200 build.log >> bin/BUILD_FAILED.txt
          fi
        fi

    - name: Upload APK artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: apk-artifact
        path: |
          bin/*
          .buildozer/**/*.apk
          build.log
          buildozer.spec
        if-no-files-found: warn

    - name: Create build summary
      if: always()
      run: |
        echo "=== Build Summary ===" > build-summary.txt
        echo "Build exit code: $?" >> build-summary.txt
        echo "\n=== Environment Variables ===" >> build-summary.txt
        env | sort >> build-summary.txt
        echo "\n=== Directory Structure ===" >> build-summary.txt
        find . -type d | sort >> build-summary.txt
        echo "\n=== Bin Directory Contents ===" >> build-summary.txt
        ls -la bin/ 2>/dev/null || echo "bin/ directory not found" >> build-summary.txt

    - name: Upload build summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-summary
        path: build-summary.txt
        if-no-files-found: warn
        retention-days: 7
