name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Cancel in-progress runs when new commits are pushed
concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    env:
      ANDROID_HOME: /opt/android-sdk
      ANDROID_SDK_ROOT: /opt/android-sdk
      ANDROID_NDK_HOME: /opt/android-sdk/ndk/21.3.6528147

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
            build-essential \
            git \
            python3-pip \
            python3-dev \
            python3-venv \
            libssl-dev \
            zlib1g-dev \
            libffi-dev \
            libxml2-dev \
            libxslt1-dev \
            libjpeg-dev \
            libpng-dev \
            autoconf \
            libtool \
            pkg-config \
            zlib1g-dev \
            cmake \
            openjdk-11-jdk \
            unzip \
            wget \
            curl \
            ninja-build

    - name: Install Buildozer and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --user --upgrade Cython==0.29.33
        pip install --user buildozer
        export PATH=$PATH:$HOME/.local/bin/
        buildozer --version

    - name: Set up Android SDK and NDK
      run: |
        sudo mkdir -p $ANDROID_HOME
        sudo chown $USER:$USER $ANDROID_HOME
        mkdir -p ~/.android
        touch ~/.android/repositories.cfg
        
        # Install Android Command Line Tools
        wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O cmdline-tools.zip
        mkdir -p $ANDROID_HOME/cmdline-tools/latest
        unzip -q cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools/
        mv $ANDROID_HOME/cmdline-tools/cmdline-tools/* $ANDROID_HOME/cmdline-tools/latest/
        rm -r $ANDROID_HOME/cmdline-tools/cmdline-tools
        
        # Accept licenses
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
        
        # Install required Android packages
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-30" \
            "build-tools;30.0.3" \
            "ndk;21.3.6528147"
        
        # Set environment variables for buildozer
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/21.3.6528147" >> $GITHUB_ENV
        
        # Add Android tools to PATH
        echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
        echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH

    - name: Verify buildozer configuration
      run: |
        # Verify buildozer.spec exists and has correct configuration
        if [ ! -f buildozer.spec ]; then
          echo "buildozer.spec not found!"
          exit 1
        fi
        
        # Display current configuration for debugging
        echo "=== Current buildozer.spec configuration ==="
        grep -E "(requirements|android\.(api|minapi|ndk|sdk|archs|accept_sdk_license))" buildozer.spec || true
        
        # Verify environment variables
        echo "=== Environment Variables ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        
        # Check if Android SDK is properly installed
        ls -la $ANDROID_HOME/ || echo "Android SDK directory not found"
        ls -la $ANDROID_HOME/ndk/ || echo "NDK directory not found"

    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt

    - name: Build APK
      run: |
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$HOME/.local/bin
        export ANDROID_HOME=$ANDROID_HOME
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export ANDROID_NDK_HOME=$ANDROID_HOME/ndk/21.3.6528147
        
        # Create necessary directories
        mkdir -p bin
        
        # Build with buildozer
        echo "Starting buildozer build..."
        buildozer -v android debug 2>&1 | tee build.log
        
        # Check if APK was generated
        if ls bin/*.apk 1> /dev/null 2>&1; then
          echo "APK built successfully"
          ls -la bin/
        else
          echo "APK build failed - checking for errors..."
          echo "=== Build Log Tail ==="
          tail -50 build.log
          echo "=== Bin Directory Contents ==="
          ls -la bin/ || echo "bin directory not found"
          exit 1
        fi

    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: apk-artifact
        path: |
          bin/*.apk
          build.log
          buildozer.spec

    - name: Create build summary
      if: always()
      run: |
        echo "=== Build Summary ===" > build-summary.txt
        echo "Build exit code: $?" >> build-summary.txt
        echo "\n=== Environment Variables ===" >> build-summary.txt
        env | sort >> build-summary.txt
        echo "\n=== Directory Structure ===" >> build-summary.txt
        find . -type d | sort >> build-summary.txt
        echo "\n=== Bin Directory Contents ===" >> build-summary.txt
        ls -la bin/ 2>/dev/null || echo "bin/ directory not found" >> build-summary.txt

    - name: Upload build summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-summary
        path: build-summary.txt
        if-no-files-found: warn
        retention-days: 7
